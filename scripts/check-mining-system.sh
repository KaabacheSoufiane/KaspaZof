#!/bin/bash
set -e

# Script de v√©rification du syst√®me de minage Kaspa
# V√©rifie que tous les composants sont correctement install√©s et configur√©s

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo "üîç V√©rification du syst√®me de minage KaspaZof"
echo "=============================================="

cd "$PROJECT_DIR"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

check_ok() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

check_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

check_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifications syst√®me
echo "üìã V√©rifications syst√®me:"

# Docker
if command -v docker &> /dev/null; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    check_ok "Docker install√© (version $DOCKER_VERSION)"
else
    check_error "Docker non install√©"
    exit 1
fi

# Docker Compose
if command -v docker-compose &> /dev/null; then
    COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    check_ok "Docker Compose install√© (version $COMPOSE_VERSION)"
    DOCKER_COMPOSE="docker-compose"
elif command -v docker compose &> /dev/null; then
    check_ok "Docker Compose (plugin) install√©"
    DOCKER_COMPOSE="docker compose"
else
    check_error "Docker Compose non install√©"
    exit 1
fi

# V√©rifier que Docker fonctionne
if docker ps &> /dev/null; then
    check_ok "Docker daemon actif"
else
    check_error "Docker daemon non accessible"
    exit 1
fi

echo ""
echo "üìÅ V√©rifications des fichiers:"

# Fichiers requis
REQUIRED_FILES=(
    "docker-compose-mining.yml"
    "kaspa-wallet/Dockerfile"
    "kaspa-wallet/docker-entrypoint.sh"
    "mining-monitor/Dockerfile"
    "mining-monitor/main.py"
    "scripts/start-mining.sh"
    "scripts/mining-manager.sh"
    "monitoring/prometheus-mining.yml"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [ -f "$file" ]; then
        check_ok "Fichier $file pr√©sent"
    else
        check_error "Fichier $file manquant"
    fi
done

# V√©rifier les permissions des scripts
SCRIPTS=(
    "scripts/start-mining.sh"
    "scripts/mining-manager.sh"
    "scripts/generate_dev_secrets.sh"
)

for script in "${SCRIPTS[@]}"; do
    if [ -x "$script" ]; then
        check_ok "Script $script ex√©cutable"
    else
        check_warning "Script $script non ex√©cutable (chmod +x $script)"
    fi
done

echo ""
echo "‚öôÔ∏è  V√©rifications de configuration:"

# Fichier .env
if [ -f ".env" ]; then
    check_ok "Fichier .env pr√©sent"
    
    # V√©rifier les variables importantes
    source .env
    
    if [ -n "$MINING_ADDRESS" ] && [ "$MINING_ADDRESS" != "kaspa:qz0000000000000000000000000000000000000000000000000000000000" ]; then
        check_ok "Adresse de minage configur√©e: $MINING_ADDRESS"
    else
        check_warning "Adresse de minage par d√©faut (√† modifier dans .env)"
    fi
    
    if [ -n "$KASPA_RPC_PASSWORD" ]; then
        check_ok "Mot de passe RPC Kaspa configur√©"
    else
        check_warning "Mot de passe RPC Kaspa non configur√©"
    fi
    
else
    check_warning "Fichier .env manquant (ex√©cuter ./scripts/generate_dev_secrets.sh)"
fi

# Binaires Kaspa
echo ""
echo "üîó V√©rifications des binaires Kaspa:"

KASPA_BINARIES=(
    "kaspa-wallet/bin/kaspad"
    "kaspa-wallet/bin/kaspawallet"
    "kaspa-wallet/bin/kaspaminer"
    "kaspa-wallet/bin/kaspactl"
)

for binary in "${KASPA_BINARIES[@]}"; do
    if [ -f "$binary" ]; then
        if [ -x "$binary" ]; then
            check_ok "Binaire $binary pr√©sent et ex√©cutable"
        else
            check_warning "Binaire $binary pr√©sent mais non ex√©cutable"
        fi
    else
        check_error "Binaire $binary manquant"
    fi
done

echo ""
echo "üê≥ V√©rifications Docker:"

# Images Docker
echo "V√©rification des images Docker disponibles..."
if docker images | grep -q "kaspazof"; then
    check_ok "Images KaspaZof pr√©sentes"
else
    check_warning "Images KaspaZof non construites (seront construites au d√©marrage)"
fi

# Volumes Docker
echo "V√©rification des volumes Docker..."
VOLUMES=$(docker volume ls -q | grep kaspazof | wc -l)
if [ "$VOLUMES" -gt 0 ]; then
    check_ok "$VOLUMES volumes KaspaZof existants"
else
    check_warning "Aucun volume KaspaZof (seront cr√©√©s au d√©marrage)"
fi

echo ""
echo "üåê V√©rifications r√©seau:"

# Ports disponibles
REQUIRED_PORTS=(8000 8080 8081 3000 9090 5432 6379 16210 16211)
for port in "${REQUIRED_PORTS[@]}"; do
    if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
        check_warning "Port $port d√©j√† utilis√©"
    else
        check_ok "Port $port disponible"
    fi
done

echo ""
echo "üíæ V√©rifications des ressources:"

# Espace disque
AVAILABLE_SPACE=$(df . | tail -1 | awk '{print $4}')
AVAILABLE_GB=$((AVAILABLE_SPACE / 1024 / 1024))

if [ "$AVAILABLE_GB" -gt 50 ]; then
    check_ok "Espace disque suffisant (${AVAILABLE_GB}GB disponibles)"
elif [ "$AVAILABLE_GB" -gt 20 ]; then
    check_warning "Espace disque limit√© (${AVAILABLE_GB}GB disponibles, 50GB+ recommand√©s)"
else
    check_error "Espace disque insuffisant (${AVAILABLE_GB}GB disponibles, 50GB+ requis)"
fi

# M√©moire RAM
TOTAL_RAM=$(free -g | awk '/^Mem:/{print $2}')
if [ "$TOTAL_RAM" -gt 7 ]; then
    check_ok "RAM suffisante (${TOTAL_RAM}GB)"
elif [ "$TOTAL_RAM" -gt 3 ]; then
    check_warning "RAM limit√©e (${TOTAL_RAM}GB, 8GB+ recommand√©s)"
else
    check_error "RAM insuffisante (${TOTAL_RAM}GB, 4GB+ requis)"
fi

echo ""
echo "üìä R√©sum√©:"

# Compter les erreurs et avertissements
ERROR_COUNT=$(grep -c "‚ùå" /tmp/check_output 2>/dev/null || echo 0)
WARNING_COUNT=$(grep -c "‚ö†Ô∏è" /tmp/check_output 2>/dev/null || echo 0)

if [ "$ERROR_COUNT" -eq 0 ] && [ "$WARNING_COUNT" -eq 0 ]; then
    echo -e "${GREEN}üéâ Syst√®me pr√™t pour le minage Kaspa!${NC}"
    echo ""
    echo "Commandes pour d√©marrer:"
    echo "  ./scripts/start-mining.sh [ADRESSE_KASPA]"
    echo "  ./scripts/mining-manager.sh status"
elif [ "$ERROR_COUNT" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Syst√®me fonctionnel avec quelques avertissements${NC}"
    echo "Vous pouvez d√©marrer le minage, mais v√©rifiez les avertissements ci-dessus."
else
    echo -e "${RED}‚ùå Erreurs d√©tect√©es, corrigez-les avant de d√©marrer le minage${NC}"
    exit 1
fi

echo ""
echo "üìö Ressources utiles:"
echo "  Guide de minage: ./MINING_GUIDE.md"
echo "  Documentation: ./README.md"
echo "  Support: https://github.com/BJATechnology/KaspaZof/issues"