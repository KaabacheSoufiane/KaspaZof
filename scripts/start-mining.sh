#!/bin/bash
set -e

# Script de d√©marrage du minage Kaspa
# Usage: ./start-mining.sh [MINING_ADDRESS]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo "üöÄ KaspaZof - D√©marrage du minage Kaspa"
echo "========================================"

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! command -v docker compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

# D√©finir la commande Docker Compose
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
else
    DOCKER_COMPOSE="docker compose"
fi

cd "$PROJECT_DIR"

# V√©rifier le fichier .env
if [ ! -f ".env" ]; then
    echo "üìù G√©n√©ration du fichier .env..."
    ./scripts/generate_dev_secrets.sh
fi

# Charger les variables d'environnement
source .env

# V√©rifier l'adresse de minage
MINING_ADDRESS=${1:-$MINING_ADDRESS}
if [ -z "$MINING_ADDRESS" ]; then
    echo "‚ùå Adresse de minage requise"
    echo "Usage: $0 <MINING_ADDRESS>"
    echo "Ou d√©finir MINING_ADDRESS dans .env"
    exit 1
fi

# Valider l'adresse Kaspa
if [[ ! "$MINING_ADDRESS" =~ ^kaspa:[a-z0-9]{61}$ ]]; then
    echo "‚ö†Ô∏è  Format d'adresse Kaspa invalide: $MINING_ADDRESS"
    echo "Format attendu: kaspa:qqxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
    read -p "Continuer quand m√™me? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo "üìã Configuration du minage:"
echo "   Adresse: $MINING_ADDRESS"
echo "   R√©seau: mainnet"
echo "   Mineurs: 1 (principal)"

# Exporter l'adresse de minage
export MINING_ADDRESS="$MINING_ADDRESS"

# Arr√™ter les services existants
echo "üõë Arr√™t des services existants..."
$DOCKER_COMPOSE -f docker-compose-mining.yml down

# Construire les images
echo "üî® Construction des images Docker..."
$DOCKER_COMPOSE -f docker-compose-mining.yml build

# D√©marrer les services de base
echo "üöÄ D√©marrage des services de base..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d postgres redis

# Attendre que PostgreSQL soit pr√™t
echo "‚è≥ Attente de PostgreSQL..."
sleep 10

# D√©marrer le n≈ìud Kaspa
echo "üîó D√©marrage du n≈ìud Kaspa..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d kaspa-node

# Attendre que le n≈ìud soit synchronis√©
echo "‚è≥ Attente de la synchronisation du n≈ìud..."
sleep 30

# D√©marrer le wallet
echo "üí∞ D√©marrage du wallet Kaspa..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d kaspa-wallet

# D√©marrer le monitoring
echo "üìä D√©marrage du monitoring..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d prometheus grafana mining-monitor

# D√©marrer l'API et le frontend
echo "üåê D√©marrage de l'interface web..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d api frontend

# D√©marrer le mineur principal
echo "‚õèÔ∏è  D√©marrage du mineur Kaspa..."
$DOCKER_COMPOSE -f docker-compose-mining.yml up -d kaspa-miner-1

echo ""
echo "‚úÖ Minage Kaspa d√©marr√© avec succ√®s!"
echo ""
echo "üåê Interfaces disponibles:"
echo "   Frontend:    http://localhost:8081"
echo "   API:         http://localhost:8000"
echo "   Grafana:     http://localhost:3000 (admin/admin)"
echo "   Prometheus:  http://localhost:9090"
echo "   Monitoring:  http://localhost:8080"
echo ""
echo "üìä Commandes utiles:"
echo "   Logs du mineur:  $DOCKER_COMPOSE -f docker-compose-mining.yml logs -f kaspa-miner-1"
echo "   Logs du n≈ìud:    $DOCKER_COMPOSE -f docker-compose-mining.yml logs -f kaspa-node"
echo "   Statistiques:    curl http://localhost:8080/stats"
echo "   Arr√™ter:         $DOCKER_COMPOSE -f docker-compose-mining.yml down"
echo ""
echo "‚ö†Ô∏è  Le n≈ìud doit se synchroniser avant que le minage soit efficace."
echo "   Surveillez les logs pour voir la progression."